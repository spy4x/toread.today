.infinite-scroll-container(
    infinite-scroll='',
    '[infiniteScrollThrottle]'="300",
    '(scrolled)'='loadMore.emit()')

  .item.panel-block.is-block('*ngFor'='let item of items')
    .line.first.columns.is-mobile.is-multiline
      .column
        a.item--title.mr-2('[href]'='item.url',
                           target='_blank',
                           '(click)'='read(item)',
                           '[title]'='item.url',)
          i.is-inline.mr-2(aria-hidden='true', '[ngClass]'='item.type | getIconByItemType')
          | {{item.title || item.url}}

      .column.is-narrow
        .icon.is-small.has-text-info.mr-3(
            '*ngIf'='item.urlParseStatus === "notStarted"',
            title='URL parsing is in progress..')
          i.fas.fa-sync
        a.icon.is-small.has-text-danger.mr-3(
            '*ngIf'='item.urlParseStatus === "error"',
            '(click)'='retryURLParsing.emit(item.id)'
            '[title]'='"URL parse error happened. Click to retry parsing. \\nError message: "+item.urlParseError')
          i.fas.fa-exclamation-triangle
        tt-tag-selector(
            '[tags]'='tags',
            '[selectedIds]'='item.tags',
            '(toggle)'='toggleTagHandler($event, item)',
            '[isTitleCustom]'='true',
            '[isAllTagsVisible]'='false')
          a.has-text-info
            i.fas.fa-hashtag(aria-hidden='true')
        a.icon.is-small.ml-3.has-text-warning(
            '(click)'='toggleFavouriteHandler(item)',
            '[title]'='item.isFavourite ? "Remove from favorite" : "Add to favorite"')
          i.fa-star('[class.fas]'='item.isFavourite', '[class.far]'='!item.isFavourite')
        .dropdown.is-hoverable.is-right.ml-3
          .dropdown-trigger
            a
              span.has-text-primary
                i.far.fa-edit(aria-hidden='true')
          .dropdown-menu(role='menu')
            .dropdown-content
              a.dropdown-item.has-text-success(
                  '*ngIf'='item.status !== "finished"',
                  '(click)'='finishReading.emit(item.id)')
                span.icon
                  i.fa-fw.fas.fa-check
                span Mark as Finished
              a.dropdown-item(
                  '*ngIf'='item.status === "finished"',
                  '(click)'='startReading.emit(item.id)')
                span.icon
                  i.fa-fw.fas.fa-envelope-open
                span Mark as Opened
              a.dropdown-item(
                  '*ngIf'='item.status !== "new"',
                  '(click)'='undoReading.emit(item.id)')
                span.icon
                  i.fa-fw.far.fa-circle
                span Mark as New
              a.dropdown-item(
                  '*ngIf'='item.rating !== 0',
                  '(click)'='setRating(item, 0)')
                span.icon
                  i.fa-fw.far.fa-thumbs-up
                span Set rating to neutral
              hr.dropdown-divider
              a.dropdown-item.has-text-danger('(click)'='delete.emit(item.id)')
                span.icon
                  i.fa-fw.far.fa-trash-alt
                span Delete

    .line.second
        a.action('[ngClass]'='{"has-text-primary": item.rating === 1}', '(click)'='setRating(item, 1)')
          i.far.fa-thumbs-up
        a.action('[ngClass]'='{"has-text-danger": item.rating === -1}', '(click)'='setRating(item, -1)')
          i.far.fa-thumbs-down
        a.action.bigger-margin('[ngClass]'='{"has-text-primary": item.withComment}', '(click)'='toggleComment(item.id)')
          i.far.fa-comment-alt
        button.button.finish.is-success.is-small.bigger-margin('*ngIf'='item.status === "opened"', '(click)'='finishReading.emit(item.id)')
          span.icon
            i.fas.fa-check
          span Finish
        a.tag.action(
        '*ngFor'='let tagId of item.tags',
        '(click)'='tagClick.emit(tagId)',
        '[ngStyle]'='{"background-color": (tagId | tagById:tags)?.color || "#00d1b2", "color": "white"}')
          | {{(tagId | tagById:tags)?.title || 'Tag not found'}}

    .line.third('*ngIf'='openedComments[item.id]')
        textarea.textarea('[ngModel]'='item.comment', '#commentTextArea'='')
        .buttons.is-right
          button.button.is-primary('(click)'='setComment(item.id, commentTextArea.value)') Save comment
          button.button.mr-0('(click)'='toggleComment(item.id, false)') Cancel

ng-container('*ngIf'='isZeroItems()')
  .notification
    p No items

ng-container('*ngIf'='areAllItemsLoaded && !isZeroItems() && !hideTheEnd')
  .content.is-small.has-text-grey-light.has-text-centered.my-4 The End
